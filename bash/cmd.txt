#!/bin/bash  or #!/bin/sh 确定执行器 
./ 运行需要加权限

your_name="lw" 赋值
printf "lw" 打印
echo ${变量} 推荐使用{}更规范
readonly valuename 设定为只读,不能改不能删
变量被删除后不能再次使用。unset 命令不能删除只读变量
''用在字符串拼接时会出现 “my name is 'lw'” 双引号默认只有“my name is lw”
单引号中转义，变量均无效,只
会原样输出 如“\"lw”会输出 \"lw,若要拼接 必须加‘’
如'hello, '$your_name' !' -> hello，lw!
echo ${str:index:len}
echo `expr index "${str}" my` 查找str中的m 或者y 谁先出现返回谁的index

array_name=(value0 value1 value2 value3)只能一维，大小无限制
或  array_name[0]=0
    array_name[5]=5
可不连续，大小无限
echo ${array}返回array[0]，没有0返回空
echo ${array[index]}
echo ${array[@或者*]}返回所有元素
加#返回长度，#array[5] 123返回3,#array[@|*]返回5

${0} ${1}为终端输入的参数 $#为参数个数
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。
如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-	显示Shell使用的当前选项，与set命令功能相同。
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
-gt > -lt -ge >= -le -eq -nq

! -o -a 与&& || 类似只不过&& || 要加两层[]

字符串处理
= != 判断字符串是否相等 需要空格 [ $a = $b ]
-z 字符串长度是否为零，为0返回True
-n 不为零返回True
$ 判断是否为空
用-z -n $时加“”
用-z -n $时加“”